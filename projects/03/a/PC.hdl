// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    /* First, add the increment to the register's out; it is done this way
       because the increment should not occur if we are loading in a new value
    */
    Add16(a[0]=inc, b=registerout, out=addedregisterout);

    /* Now, select either the input or the possibly incremented previous value, depending
       on whether or not we are loading a new value
    */
    Mux16(a=addedregisterout, b=in, sel=load, out=init);

    /* If the reset bit is set, that should override everything else; therefore we compute
       this last
    */
    Mux16(a=true, b=false, sel=reset, out=logicalreset);
    And16(a=init, b=logicalreset, out=registerin);

    /* If the counter is being loaded, incremented, or reset the underlying register needs
       to be loaded with a new value
    */
    Or(a=load, b=inc, out=preliminaryregisterload);
    Or(a=preliminaryregisterload, b=reset, out=registerload);

    Register(in=registerin, load=registerload, out=registerout);
    And16(a=true, b=registerout, out=out);
}

